{"version":3,"sources":["components/Title/Title.js","context/UsersContext.js","context/UserContext.js","components/Join/Join.js","components/Game/UserList/UserCard/UserCard.js","components/Game/UserList/UserList.js","context/GuessListContext.js","components/Game/GuessContainer/GuessContainer.js","components/Game/ScoreBoard/ScoreBoard.js","components/Game/Canvas/Canvas.js","components/Game/Colors.js","components/Game/Options/Options.js","components/Game/Canvas/Functions/Functions.js","components/Game/Game.js","components/Home.js","App.js","index.js"],"names":["Title","props","id","style","fontSize","size","textAlign","align","data-content","className","color","UsersContext","createContext","UsersProvider","useState","users","setUsers","Provider","value","children","UserContext","UserProvider","username","user","setUser","Join","setGame","socketRef","wait","setWait","useContext","error","setError","handleSubmit","e","current","emit","result","allUsers","stroke","autoComplete","type","placeholder","name","onChange","target","prev","onKeyPress","code","onClick","UserCard","details","drawerId","icon","faPencilAlt","score","UserList","map","u","index","GuessListContext","GuessListProvider","guessList","setGuessList","GuessContainer","guess","setGuess","guessListRef","useRef","useEffect","scrollTop","scrollHeight","renderSpan","msg","fontWeight","ref","g","key","back","backgroundColor","margin","padding","overflowWrap","transition","sender","message","toLowerCase","which","length","trim","ScoreBoard","scoredUsers","word","i","findIndex","renderScoreCard","Canvas","drawing","setDrawing","canvasParent","drawBackground","drawLine","clearCanvas","eraseCanvas","setCanvas","editOption","canvasRef","time","editOptionRef","colorRef","mousedown","undefined","canvas","ctx","getContext","parentWidth","clientWidth","parentHeight","clientHeight","smaller","width","height","on","mousemove","data","initial","x","x1","y","y1","final","x2","y2","setEventListeners","touchAction","drawImage","window","addEventListener","forEach","element","Object","keys","context","mouseDownHandler","mouseMoveHandler","mouseUpHandler","offsetX","offsetY","cursor","colors","Options","options","handleColorChange","Colors","classes","renderColorBox","handler","renderIcon","fillStyle","fillRect","beginPath","lineWidth","lineCap","lineJoin","strokeStyle","moveTo","lineTo","closePath","clearRect","sessionStorage","removeItem","setItem","toDataURL","Game","setScoredUsers","turnEnd","setTurnEnd","setDrawerId","words","setWords","setWord","setTime","setEditOption","setColor","val","el","counter","newWord","filter","faEraser","faTrash","faClock","unknown","getUnknownWord","w","handleWordSubmit","Home","ENDPOINT","game","io","transports","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b683927f.chunk.js","sourcesContent":["function Title (props) {\r\n    return(\r\n        <div id='title' style={{\r\n            fontSize: `${props.size}`,\r\n            textAlign: `${props.align}`\r\n        }}>\r\n            <span data-content=\"s\" className=\"title-span\" style={{\r\n                color:'red',\r\n            }}>s</span>\r\n            <span data-content=\"k\" className=\"title-span\" style={{\r\n                color:'orangered',\r\n            }}>k</span>\r\n            <span data-content=\"r\" className=\"title-span\" style={{\r\n                color:'yellow',\r\n            }}>r</span>\r\n            <span data-content=\"i\" className=\"title-span\" style={{\r\n                color:'green',\r\n            }}>i</span>\r\n            <span data-content=\"b\" className=\"title-span\" style={{\r\n                color:'skyblue',\r\n            }}>b</span>\r\n            <span data-content=\"b\" className=\"title-span\" style={{\r\n                color:'blue',\r\n            }}>b</span>\r\n            <span data-content=\"l\" className=\"title-span\" style={{\r\n                color:'purple',\r\n            }}>l</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title","import React, { useState, createContext } from 'react'\r\n\r\nexport const UsersContext = createContext()\r\n\r\nexport const UsersProvider = (props) => {\r\n    const [users, setUsers] = useState([])\r\n\r\n    return (\r\n        <UsersContext.Provider value={[users, setUsers]}>\r\n            {props.children}\r\n        </UsersContext.Provider>\r\n    );\r\n}","import React, { useState, createContext } from 'react'\r\n\r\nexport const UserContext = createContext()\r\n\r\nexport const UserProvider = (props) => {\r\n    const [user, setUser] = useState({\r\n        id:'',\r\n        username:'',\r\n    })\r\n\r\n    return (\r\n        <UserContext.Provider value={[user, setUser]}>\r\n            {props.children}\r\n        </UserContext.Provider>\r\n    );\r\n}","import './Join.css'\r\nimport {useState, useContext} from 'react'\r\nimport Title from '../Title/Title'\r\nimport { UsersContext } from '../../context/UsersContext'\r\nimport { UserContext } from '../../context/UserContext'\r\n\r\nfunction Join (props) {\r\n    const {setGame, socketRef, wait, setWait} = props\r\n    const [user, setUser] = useContext(UserContext)\r\n    const [users, setUsers] = useContext(UsersContext)\r\n    const [error, setError] = useState('')\r\n    //  Handle input change\r\n    const handleChange = (e) => {\r\n        let {name, value} = e.target\r\n        setUser(prev => {\r\n            return {\r\n                ...prev,\r\n                [name]:value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        if(user.username !== ''){\r\n            //  Everything is fine\r\n            socketRef.current.emit('join', user, (result)=>{\r\n                if(result.error){\r\n                    setError(result.error)\r\n                }\r\n                else{\r\n                    setError('')\r\n                    setGame(true)\r\n                    setUsers(result.allUsers)\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            setError('Fill up the details!')\r\n        }\r\n    }\r\n\r\n    //  Render functions\r\n    const renderError = () => {\r\n        return (\r\n            <p id=\"error\">\r\n                {error}\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='outer-container'>\r\n            <Title size='15vw' stroke='0.4vw' align='center' />\r\n            <div className=\"form-container\">\r\n                <div id=\"login-form\">\r\n                    <input id=\"username\" autoComplete=\"off\" className=\"mt-10\" type=\"text\" placeholder=\"Username\" name=\"username\" onChange={handleChange} onKeyPress={(e) => e.code === 'Enter' ? handleSubmit(e) : null} value={user.username} />\r\n                    <button id=\"play\" className=\"mt-10\" onClick={handleSubmit}>Join</button>\r\n                    {error ? renderError() : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Join","import './UserCard.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction UserCard(props){\r\n\r\n    const {user, details, drawerId} = props\r\n\r\n    const getName = () => {\r\n        return user.username + (details.username === user.username ? ' (You)' : '')\r\n    }\r\n\r\n    return(\r\n        <div className=\"card-container\">\r\n            <h3 id=\"user-name\">{getName()}</h3>\r\n            {user.id === drawerId ? <FontAwesomeIcon icon={faPencilAlt} /> : null}\r\n            <h3 id=\"user-score\">{user.score}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserCard\r\n\r\n// #A9FF83","import './UserList.css'\r\nimport UserCard from './UserCard/UserCard'\r\n\r\nfunction UserList({users, user, drawerId}){\r\n    return (\r\n        <div className='scores-container'>\r\n            {users.map((u, index) => <UserCard key={index} index={index} user={u} details={user} drawerId={drawerId}/> )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserList","import React, { useState, createContext } from 'react'\r\n\r\nexport const GuessListContext = createContext()\r\n\r\nexport const GuessListProvider = (props) => {\r\n    const [guessList, setGuessList] = useState([])\r\n\r\n    return (\r\n        <GuessListContext.Provider value={[guessList, setGuessList]}>\r\n            {props.children}\r\n        </GuessListContext.Provider>\r\n    );\r\n}","import { useState, useRef, useEffect, useContext } from 'react'\r\nimport { GuessListContext } from '../../../context/GuessListContext'\r\nimport './GuessContainer.css'\r\n\r\nfunction GuessContainer({socketRef}){\r\n    const [guess, setGuess] = useState('')\r\n    const [guessList, setGuessList] = useContext(GuessListContext)\r\n    const guessListRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        if(guessListRef.current)\r\n            guessListRef.current.scrollTop = guessListRef.current.scrollHeight\r\n    }, [guessList])\r\n\r\n    const handleGuessChange = (e) => {\r\n        setGuess(e.target.value.toLowerCase())\r\n    }\r\n    const handleGuessSubmit = (e) => {\r\n        if(e.which === 13 && guess.length > 0 && guess.trim().length > 0) {\r\n            socketRef.current.emit('guess', guess.trim())\r\n            setGuess('')\r\n        }\r\n    }\r\n\r\n    const renderGuess = (g, key) => {\r\n        let back = key % 2===0 ? '#E8E8E8' : '#C8C8C8'\r\n        return (\r\n            <p key={key} style={{\r\n                color:`${g.color}`,\r\n                backgroundColor: back,\r\n                margin:'0',\r\n                padding: '10px',\r\n                overflowWrap: 'break-word',\r\n                transition: '0.5s ease'\r\n            }}> {g.sender ? renderSpan(g.sender) : null} <span>{g.message}</span> </p>\r\n        )\r\n    }\r\n    \r\n    const renderSpan = (msg) => {\r\n        return (\r\n            <span style={{\r\n                fontWeight:'800'\r\n            }}> {msg} : </span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"guess-container\">\r\n            <div ref={guessListRef} className=\"guess-list\">\r\n                {guessList.map(renderGuess)}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input className=\"guess-input\" type=\"text\" placeholder=\"Type your guess ...\" onChange={handleGuessChange} onKeyPress={handleGuessSubmit} value={guess} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuessContainer","import './ScoreBoard.css'\r\n\r\nfunction ScoreBoard({users, scoredUsers, word}){\r\n\r\n    const renderScoreCard = (user, i) => {\r\n        const index = scoredUsers.findIndex((u) => u.id === user.id)\r\n        return (\r\n            <div key={i} className=\"score-card\">\r\n                <h5> {user.username} </h5>\r\n                <h5 style={{ color:'green' }}> {index === -1 ? 0 : 100} </h5>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"score-board\">\r\n            <h3 className=\"scores\"> The word was : {word} </h3>\r\n            {users.map((u, index) => renderScoreCard(u, index))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreBoard","import './Canvas.css'\r\nimport {useRef, useEffect, useState} from 'react'\r\n\r\nfunction Canvas(props){\r\n\r\n    const {socketRef, drawerId, drawing, setDrawing, canvasParent, drawBackground, drawLine, clearCanvas, eraseCanvas, setCanvas, editOption, color, time} = props\r\n    const canvasRef = useRef(null)\r\n    const editOptionRef = useRef(editOption)\r\n    const colorRef = useRef(color)\r\n    let mousedown = undefined\r\n\r\n    //  Main useeffect\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n\r\n        setCanvas(canvas)\r\n\r\n        if(canvasParent.current){\r\n            let parentWidth = canvasParent.current.clientWidth\r\n            let parentHeight = canvasParent.current.clientHeight\r\n            let smaller = parentWidth < parentHeight ? parentWidth : parentHeight\r\n            canvas.width = smaller\r\n            canvas.height = smaller\r\n        }\r\n        drawBackground(ctx, canvas)\r\n\r\n\r\n        //  Sockets\r\n        socketRef.current.on('draw', ({color, mousedown, mousemove}) => {\r\n            drawLine(ctx, canvas, color, mousedown, mousemove)\r\n        })\r\n\r\n        socketRef.current.on('erase', ({mousedown, mousemove}) => {\r\n            eraseCanvas(ctx, canvas, 'white', mousedown, mousemove)\r\n        })\r\n\r\n        socketRef.current.on('clear', ()=>{\r\n            clearCanvas(ctx, canvas)\r\n            setDrawing([])\r\n        })\r\n\r\n        socketRef.current.on('drawData', ({x1, y1, x2, y2, color}) => {\r\n            const data = {\r\n                initial:{\r\n                    x: x1,\r\n                    y: y1\r\n                },\r\n                final:{\r\n                    x: x2,\r\n                    y: y2\r\n                },\r\n                color: color\r\n            }\r\n            setDrawing(prev => [...prev, data])\r\n            // if(final.x && final.y){\r\n            //     drawLine(ctx, canvas, color, initial, final)\r\n            // }\r\n            // else{\r\n            //     drawLine(ctx, canvas, color, initial)\r\n            // }\r\n        })\r\n\r\n    }, [])\r\n\r\n    //  Drawerid useeffect\r\n    useEffect(() => {\r\n        if(socketRef.current.id === drawerId){\r\n            setEventListeners(canvasRef.current, canvasRef.current.getContext('2d'))\r\n            canvasRef.current.style.touchAction = 'none'\r\n        }\r\n    }, [drawerId])\r\n\r\n    //  Color / Edit Option change useEffect\r\n    useEffect(() => {\r\n        colorRef.current = color\r\n        editOptionRef.current = editOption\r\n    }, [color, editOption])\r\n\r\n    //  On drawing\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        drawImage(ctx, canvas)\r\n\r\n        window.addEventListener('resize', (e)=>{\r\n            if(canvasParent.current){\r\n                let parentWidth = canvasParent.current.clientWidth\r\n                let parentHeight = canvasParent.current.clientHeight\r\n                let smaller = parentWidth < parentHeight ? parentWidth : parentHeight\r\n                canvas.width = smaller\r\n                canvas.height = smaller\r\n            }\r\n            drawBackground(canvas.getContext('2d'), canvas)\r\n            drawImage(canvas.getContext('2d'), canvas)\r\n        })\r\n    }, [drawing])\r\n\r\n    //  Draw complete\r\n    const drawImage = (ctx, canvas) => {\r\n        clearCanvas(ctx, canvas)\r\n        drawing.forEach(element => {\r\n            const initial = {\r\n                x: element.initial.x * canvas.width,\r\n                y: element.initial.y * canvas.height\r\n            }\r\n            if(Object.keys(element.final).length !== 0){\r\n                const final = {\r\n                    x: element.final.x * canvas.width,\r\n                    y: element.final.y * canvas.height\r\n                }\r\n               drawLine(ctx, canvas, element.color, initial, final)\r\n            }\r\n            else{\r\n                drawLine(ctx, canvas, element.color, initial)\r\n            }\r\n        });\r\n    }\r\n\r\n    //  Set and remove pointer event listeners\r\n    const setEventListeners = (canvas, context) => {\r\n        canvas.addEventListener('pointerdown', e => mouseDownHandler(e, context))\r\n        canvas.addEventListener('pointermove', e => mouseMoveHandler(e, context))\r\n        canvas.addEventListener('pointerup', e => mouseUpHandler(e, context))\r\n        canvas.addEventListener('pointerleave', e => mouseUpHandler(e, context))\r\n        canvas.addEventListener('pointercancel', e => mouseUpHandler(e, context))\r\n    }\r\n    const removeListeners = (canvas, context) => {\r\n        canvas.removeEventListener('pointerdown', e => mouseDownHandler(e, context))\r\n        canvas.removeEventListener('pointermove', e => mouseMoveHandler(e, context))\r\n        canvas.removeEventListener('pointerup', e => mouseUpHandler(e, context))\r\n        canvas.removeEventListener('pointerleave', e => mouseUpHandler(e, context))\r\n        canvas.removeEventListener('pointercancel', e => mouseUpHandler(e, context))\r\n    }\r\n\r\n    //  Event handlers\r\n    const mouseMoveHandler = (e, context) => {\r\n        if(mousedown){\r\n            let mousemove = {\r\n                x: e.offsetX,\r\n                y: e.offsetY\r\n            }\r\n            const canvas = canvasRef.current\r\n            // draw line\r\n            if(editOptionRef.current === 'edit'){\r\n                // drawLine(context, canvas, colorRef.current, mousedown, mousemove)\r\n                const data = {\r\n                    initial:{\r\n                        x: mousedown.x / canvas.width,\r\n                        y: mousedown.y / canvas.height\r\n                    },\r\n                    final:{\r\n                        x:mousemove.x / canvas.width,\r\n                        y:mousemove.y / canvas.height\r\n                    },\r\n                    color: colorRef.current\r\n                }\r\n                setDrawing(prev => [...prev, data])\r\n                socketRef.current.emit('drawData', {\r\n                    x1 : data.initial.x,\r\n                    y1 : data.initial.y,\r\n                    x2 : data.final.x,\r\n                    y2 : data.final.y,\r\n                    color: colorRef.current,\r\n                })\r\n            }\r\n            else{\r\n                // drawLine(context, canvasRef.current, 'white', mousedown, mousemove)\r\n                const data = {\r\n                    initial:{\r\n                        x: mousedown.x / canvas.width,\r\n                        y: mousedown.y / canvas.height\r\n                    },\r\n                    final:{\r\n                        x:mousemove.x / canvas.width,\r\n                        y:mousemove.y / canvas.height\r\n                    },\r\n                    color: 'white'\r\n                }\r\n                setDrawing(prev => [...prev, data])\r\n                socketRef.current.emit('drawData', {\r\n                    x1 : data.initial.x,\r\n                    y1 : data.initial.y,\r\n                    x2 : data.final.x,\r\n                    y2 : data.final.y,\r\n                    color: 'white',\r\n                })\r\n            }\r\n\r\n            mousedown = mousemove\r\n        }\r\n    }\r\n    const mouseDownHandler = (e, context) => {\r\n        mousedown = {\r\n            x: e.offsetX,\r\n            y: e.offsetY,\r\n        }\r\n        const canvas = canvasRef.current\r\n        if(editOptionRef.current === 'edit'){\r\n            // drawLine(context, canvas, colorRef.current, mousedown)\r\n            const data = {\r\n                initial:{\r\n                    x: mousedown.x / canvas.width,\r\n                    y: mousedown.y / canvas.height\r\n                },\r\n                final:{},\r\n                color: colorRef.current\r\n            }\r\n            setDrawing(prev => [...prev, data])\r\n            socketRef.current.emit('drawData', {\r\n                x1 : data.initial.x,\r\n                y1 : data.initial.y,\r\n                color: colorRef.current,\r\n            })\r\n        }\r\n        else{\r\n            // drawLine(context, canvasRef.current, 'white', mousedown)\r\n            const data = {\r\n                initial:{\r\n                    x: mousedown.x / canvas.width,\r\n                    y: mousedown.y / canvas.height\r\n                },\r\n                final:{},\r\n                color: 'white'\r\n            }\r\n            setDrawing(prev => [...prev, data])\r\n            socketRef.current.emit('drawData', {\r\n                x1 : data.initial.x,\r\n                y1 : data.initial.y,\r\n                color: 'white',\r\n            })\r\n        }\r\n    }\r\n    const mouseUpHandler = (e, context) => {\r\n        mousedown = undefined;\r\n    }\r\n\r\n    //  Render\r\n    return (\r\n        <canvas ref={canvasRef} id='canvas' style={{\r\n            cursor: 'url(./Cursor/edit5.svg) 5 5, crosshair'\r\n        }} />\r\n    );\r\n}\r\n\r\nexport default Canvas","const colors = [\r\n    '#000000',\r\n    '#FFFFFF',\r\n    '#C0C0C0',\r\n    '#808080',\r\n    '#FFA500',\r\n    '#A52A2A',\r\n    '#800000',\r\n    '#008000',\r\n    '#808000',\r\n    '#FF0000',\r\n    '#00FFFF',\r\n    '#0000FF',\r\n    '#0000A0',\r\n    '#ADD8E6',\r\n    '#800080',\r\n    '#FFFF00',\r\n    '#00FF00',\r\n    '#FF00FF'\r\n]\r\nexport default colors","import './Options.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Colors from '../Colors'\r\n\r\nfunction Options({color, options, editOption, handleColorChange}){\r\n    const renderIcon = (e, index) => {\r\n        let classes = 'option-icon'\r\n        if(e.name === editOption){\r\n            classes += ' option-icon-active'\r\n        }\r\n        return(\r\n            <FontAwesomeIcon key={index} className={classes} icon={e.icon} onClick={e.handler} />\r\n        )\r\n    }\r\n\r\n    const renderColorBox = (e, index) => {\r\n        let classes = 'color-box'\r\n        if(e === color){\r\n            classes += ' color-box-active'\r\n        }\r\n        return (\r\n            <button key={index} onClick={()=>handleColorChange(e)} className={classes} style={{\r\n                backgroundColor: `${e}`,\r\n            }}>\r\n            </button>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"options-outer-container\">\r\n            <div className=\"options-container\">\r\n                {Colors.map((e, index) => renderColorBox(e, index))}\r\n            </div>\r\n            <div className=\"options-container\">\r\n                {options.map((e, index) => renderIcon(e, index))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Options","let strokeColor = 'black'\r\n\r\nexport const drawBackground = (context, canvas) => {\r\n    if(context){\r\n        context.fillStyle='white'\r\n        context.fillRect(0, 0, canvas.width, canvas.height)\r\n    }\r\n}\r\n\r\nexport const drawLine = (context, canvas, color, initial, final) => {\r\n    if(context){\r\n        if(final){\r\n            context.beginPath()\r\n            context.lineWidth = 6\r\n            context.lineCap = 'round'\r\n            context.lineJoin = 'round'\r\n            context.strokeStyle = color\r\n            context.moveTo(initial.x, initial.y)\r\n            context.lineTo(final.x, final.y)\r\n            context.stroke()\r\n            context.closePath()\r\n        }\r\n        else{\r\n            context.fillStyle = color\r\n            context.fillRect(initial.x - 4, initial.y - 4, 6, 6)\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearCanvas = (context, canvas) => {\r\n    if(context){\r\n        context.clearRect(0, 0, canvas.width, canvas.height)\r\n        drawBackground(context, canvas)\r\n        window.sessionStorage.removeItem('drawing')\r\n    }\r\n}\r\n\r\nexport const eraseCanvas = (context, canvas, color, initial, final) => {\r\n    if(context){\r\n        if(final){\r\n            context.beginPath()\r\n            context.strokeStyle = 'white'\r\n            context.lineWidth = 10\r\n            context.lineCap = 'round'\r\n            context.lineJoin = 'round'\r\n            context.moveTo(initial.x, initial.y)\r\n            context.lineTo(final.x, final.y)\r\n            context.stroke()\r\n            context.closePath()\r\n        }\r\n        else{\r\n            context.fillStyle = 'white'\r\n            context.fillRect(initial.x - 5, initial.y - 5, 10, 10)\r\n        }\r\n        // socket.emit('draw', {initial, final})\r\n        window.sessionStorage.setItem('drawing', canvas.toDataURL('image/svg'))\r\n    }\r\n}\r\n\r\nexport default strokeColor","import './Game.css'\r\nimport {useState, useEffect, useRef, useContext} from 'react'\r\nimport Title from '../Title/Title'\r\nimport UserList from './UserList/UserList'\r\nimport GuessContainer from './GuessContainer/GuessContainer'\r\nimport ScoreBoard from './ScoreBoard/ScoreBoard'\r\nimport Canvas from './Canvas/Canvas'\r\nimport Options from './Options/Options'\r\nimport {drawBackground, drawLine, clearCanvas, eraseCanvas} from './Canvas/Functions/Functions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEraser, faPencilAlt, faTrash, faClock } from '@fortawesome/free-solid-svg-icons'\r\nimport Colors from './Colors'\r\nimport { UsersContext } from '../../context/UsersContext'\r\nimport { UserContext } from '../../context/UserContext'\r\nimport { GuessListContext } from '../../context/GuessListContext'\r\n\r\nfunction Game (props) {\r\n\r\n    const {socketRef, wait, setWait} = props\r\n    const [users, setUsers] = useContext(UsersContext)\r\n    const [user, setUser] = useContext(UserContext)\r\n    const [scoredUsers, setScoredUsers] = useState([])\r\n    const [turnEnd, setTurnEnd] = useState(false)\r\n    const [drawerId, setDrawerId] = useState('')\r\n    const [drawing, setDrawing] = useState([])\r\n    const [words, setWords] = useState([])\r\n    const [word, setWord] = useState('_')\r\n    const [time, setTime] = useState('-')\r\n    const [editOption, setEditOption] = useState('edit')\r\n    const [canvas, setCanvas] = useState(null)\r\n    const [color, setColor] = useState(Colors[0])\r\n    const canvasParent = useRef(null)\r\n    const [guessList, setGuessList] = useContext(GuessListContext)\r\n\r\n    useEffect(() => {\r\n        socketRef.current.emit('joined', user.username)\r\n\r\n        //  When a user joins\r\n        socketRef.current.on('addUser', (u) => {\r\n            setUsers(prev => {\r\n                return [...prev, u]\r\n            })\r\n        })\r\n\r\n        //  Wait\r\n        socketRef.current.on('wait', (val) => {\r\n            setWait(val)\r\n        })\r\n\r\n        //  Update the score\r\n        socketRef.current.on('updateScore', (u) => {\r\n            setUsers(prev => {\r\n                return prev.map((el) => el.id === u.id ? u : el)\r\n            })\r\n        })\r\n\r\n        //  A guess is made\r\n        socketRef.current.on('guess', (g) => {\r\n            setGuessList(prev => [...prev, g])\r\n        })\r\n        \r\n        //  Choose a word\r\n        socketRef.current.on('chooseWord', (words)=>{\r\n            setWords(words)\r\n        })\r\n\r\n        //  On drawing\r\n        socketRef.current.on('drawing', ({drawing}) => {\r\n            setDrawing(drawing)\r\n        })\r\n\r\n        //  Timer\r\n        socketRef.current.on('timer', (counter)=>{\r\n            setTime(counter)\r\n        })\r\n        socketRef.current.on('end', (scoredUsers)=>{\r\n            setTurnEnd(true)\r\n            setScoredUsers(scoredUsers)\r\n            setDrawing([])\r\n            setTime('-')\r\n        })\r\n\r\n        //  Reset scores\r\n        socketRef.current.on('reset', ()=>{\r\n            //  Set scores to zero\r\n            setUsers(prev => {\r\n                return prev.map(el => {\r\n                    return {\r\n                        ...el,\r\n                        score:0\r\n                    }\r\n                })\r\n            })\r\n\r\n            setTime('-')\r\n       \r\n            //  Set the guess list empty\r\n            setGuessList([])\r\n        })\r\n        \r\n        //  Drawer index\r\n        socketRef.current.on('drawer', ({id, newWord})=>{\r\n            setDrawerId(id)\r\n            setWord(newWord)\r\n            setScoredUsers([])\r\n            setTurnEnd(false)\r\n        })\r\n\r\n        //  When a user leaves\r\n        socketRef.current.on('removeUser', (u) => {\r\n            setUsers(prev => {\r\n                return prev.filter((el) => el.id !== u.id)\r\n            })\r\n        })\r\n    }, [])\r\n\r\n    //  Change handlers\r\n    const getUnknownWord = () => {\r\n        let size = word.length\r\n        let unknown = ''\r\n        for(let i = 0; i < size; i++){\r\n            if(word[i] === '-' || word[i] === ' ')\r\n                unknown += word[i]\r\n            else\r\n                unknown += '_'\r\n        }\r\n        if(unknown === '_' || unknown === ''){\r\n            return '_'\r\n        }\r\n        return unknown\r\n    }\r\n\r\n    //  Options handler\r\n    const handleClear = (e) => {\r\n        clearCanvas(canvas.getContext('2d'), canvas)\r\n        setDrawing([])\r\n        socketRef.current.emit('clear')\r\n    }\r\n\r\n    const handleWordSubmit = (w) => {\r\n        socketRef.current.emit('chooseWord', w)\r\n        setWords([])\r\n    }\r\n\r\n    const handleEditOption = () => {\r\n        setEditOption('edit')\r\n    }\r\n\r\n    const handleEraseOption = () => {\r\n        setEditOption('erase')\r\n    }\r\n\r\n    const handleColorChange = (e) => {\r\n        setColor(e)\r\n    }\r\n\r\n    const options = [\r\n        {\r\n            name:'edit',\r\n            icon:faPencilAlt,\r\n            handler:handleEditOption\r\n        },\r\n        {\r\n            name:'erase',\r\n            icon:faEraser,\r\n            handler:handleEraseOption\r\n        },\r\n        {\r\n            name:'clear',\r\n            icon:faTrash,\r\n            handler:handleClear\r\n        }\r\n    ]\r\n\r\n    //  Render functions\r\n    const renderOptions = () => {\r\n        return(\r\n            <Options options={options} color={color} editOption={editOption} handleColorChange={handleColorChange} />\r\n        );\r\n    }\r\n\r\n    const renderScoreBoard = () => {\r\n        return (\r\n            <ScoreBoard users={users} scoredUsers={scoredUsers} word={word} />\r\n        );\r\n    }\r\n\r\n    const renderCanvas = () => {\r\n        return (\r\n            <Canvas canvasParent={canvasParent} socketRef={socketRef} drawing={drawing} setDrawing={setDrawing} drawerId={drawerId} drawBackground={drawBackground} drawLine={drawLine} clearCanvas={clearCanvas} eraseCanvas={eraseCanvas} setCanvas={setCanvas} editOption={editOption} color={color} time={time} />\r\n        );\r\n    }\r\n\r\n    const renderWordOptions = () => {\r\n        return (\r\n            <div className=\"word-options-outer-container\">\r\n                <h3>Choose a word !</h3>\r\n                <div className=\"word-options-container\">\r\n                    {words.map((w, index) => <button key={index} className=\"word-option\" onClick={()=>handleWordSubmit(w)} > {w} </button>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(wait){\r\n        return (\r\n            <div className=\"outer-container center-wait\">\r\n                <h1 className=\"wait\">Waiting for users to join</h1>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n    return (\r\n        <div className=\"outer-container\">\r\n            <nav>\r\n                <Title size='3rem' stroke='2px' align='left' />\r\n            </nav>\r\n            <div className=\"word-bar\">\r\n                <h1 className=\"timer\"> <FontAwesomeIcon icon={faClock} /> {time} s </h1>\r\n                <h1 className=\"word\"> {socketRef.current.id === drawerId ? word : getUnknownWord()} </h1>\r\n            </div>\r\n            <div className=\"canvas-outer-container\">\r\n\r\n                <UserList users={users} user={user} drawerId={drawerId} />\r\n                \r\n                <div ref={canvasParent} className=\"canvas-container\">\r\n                    {words.length === 3 ? renderWordOptions() : (turnEnd === false ? renderCanvas() : renderScoreBoard())}\r\n                </div>\r\n\r\n                <GuessContainer socketRef={socketRef} />\r\n\r\n            </div>\r\n            {socketRef.current.id === drawerId ? renderOptions() : null}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Game","import {useState, useEffect, useRef, useContext} from 'react'\r\nimport io from 'socket.io-client'\r\nimport Join from './Join/Join'\r\nimport Game from './Game/Game'\r\nimport { GuessListProvider } from '../context/GuessListContext'\r\n\r\nlet socket;\r\n\r\nfunction Home () {\r\n    // const ENDPOINT = '127.0.0.1:5000'\r\n    const ENDPOINT = 'https://skribbl-cloned.herokuapp.com/'\r\n    const [game, setGame] = useState(false)\r\n    const [wait, setWait] = useState(true)\r\n    const socketRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io(ENDPOINT, {transports:['websocket']})\r\n    }, [ENDPOINT])\r\n\r\n    return (\r\n        <GuessListProvider>\r\n            <div>\r\n                {\r\n                game ? \r\n                    <Game\r\n                        socketRef={socketRef}\r\n                        setWait={setWait}\r\n                        wait={wait}\r\n                    /> \r\n                    :\r\n                    <Join\r\n                        socketRef={socketRef}\r\n                        wait={wait}\r\n                        setGame={setGame}\r\n                        setWait={setWait}\r\n                    />\r\n                }\r\n            </div>\r\n        </GuessListProvider>\r\n    );\r\n}\r\n\r\nexport default Home","import Home from './components/Home'\r\nimport { UserProvider } from './context/UserContext';\r\nimport { UsersProvider } from './context/UsersContext';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <UsersProvider>\r\n        <UserProvider>\r\n          <Home />\r\n        </UserProvider>\r\n      </UsersProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}